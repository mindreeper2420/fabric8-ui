///////////////////////////
// Utility styles
///////////////////////////

@mixin padding-x(@count:15) {
  @for @i from 0 through @count {
    .padding-#{@i} {
      padding: #{@i}px !important;
    }
    .padding-top-#{@i} {
      padding-top: #{@i}px !important;
    }
    .padding-left-#{@i} {
      padding-left: #{@i}px !important;
    }
    .padding-bottom-#{@i} {
      padding-bottom: #{@i}px !important;
    }
    .padding-right-#{@i} {
      padding-right: #{@i}px !important;
    }
  }
}

@mixin create-padding-x-standard-offset() {

    .padding-standard-offset {
      padding: @grid-gutter-width/2 !important;
    }

    .padding-top-standard-offset {
      padding-top: @grid-gutter-width/2 !important;
    }
    .padding-left-standard-offset {
      padding-left: @grid-gutter-width/2 !important;
    }
    .padding-right-standard-offset {
      padding-right: @grid-gutter-width/2 !important;
    }
    .padding-bottom-standard-offset {
      padding-bottom: @grid-gutter-width/2 !important;
    }
}

@mixin create-margin-x-standard-offset() {
    .margin-standard-spacing {
      margin: @grid-gutter-width/2 !important;
    }

    .margin-top-standard-offset {
      margin-top: @grid-gutter-width/2 !important;
    }
    .margin-left-standard-offset {
      margin-left: @grid-gutter-width/2 !important;
    }
    .margin-right-standard-offset {
      margin-right: @grid-gutter-width/2 !important;
    }
    .margin-bottom-standard-offset {
      margin-bottom: @grid-gutter-width/2 !important;
    }
}


@mixin margin-x(@count:15) {
  @for @i from 0 through @count {
    .margin-#{@i} {
      margin: #{@i}px !important;
    }
    .margin-top-#{@i} {
      margin-top: #{@i}px !important;
    }
    .margin-left-#{@i} {
      margin-left: #{@i}px !important;
    }
    .margin-bottom-#{@i} {
      margin-bottom: #{$i}px !important;
    }
    .margin-right-#{@i} {
      margin-right: #{@i}px !important;
    }
  }
}

@include padding-x;
@include margin-x;
@include create-margin-x-standard-offset();
@include create-padding-x-standard-offset();

.margin-none
{
  margin: 0 !important;
}
.margin-top-none
{
  margin-top: 0 !important;
}
.margin-bottom-none
{
  margin-bottom: 0 !important;
}
.margin-left-none
{
  margin-left: 0 !important;
}
.margin-right-none
{
  margin-right: 0 !important;
}
.padding-none
{
  padding: 0 !important;
}
.padding-top-none
{
  padding-top: 0 !important;
}
.padding-bottom-none
{
  padding-bottom: 0 !important;
}
.padding-left-none
{
  padding-left: 0 !important;
}
.padding-right-none
{
  padding-right: 0 !important;
}
.border-transparent
{
  border-color:transparent !important;
}
.border-none
{
  border-width: 0 !important;
}
.border-top-none
{
  border-top-width: 0 !important;
}
.border-bottom-none
{
  border-bottom-width: 0 !important;
}
.border-left-none
{
  border-left-width: 0 !important;
}
.border-right-none
{
  border-right-width: 0 !important;
}


.width-100
{
  width:100%;
}

.height-100
{
  height:100%;
}

.overflow-auto{
  overflow: auto;
}

.fill-container
{
  position:absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  padding: 0;
  margin: 0;
  border-width: 0;
}
@import 'layout-debug';
///////////////////////
// Styles relating to general html document
///////////////////////
*,
*:before,
*:after {
  box-sizing: border-box;
}
body {
  // Ensure that body element height at 'least' fills the viewport.
  // This means it can grow beyond, but wont be less
  position: relative;
  min-height: 100vh;
  @include debug-stretch-to-fit-viewport;
  margin: 0;
  padding: 0;
  display: flex;
  font-size: @font-size-base;
}
.app {
  @extend .flex-grow-1;
  @extend .flex-container;
}
// an app component is a marker class for angular component dom elements
.app-component {
  //root app component
  &.app {
    >footer{
      .footer {
        text-align: center;
        font-size: @font-size-small;
        border-top: 1px solid;
        border-color: @color-pf-blue-300;
      }
    }
  }
  // Note: making relative positioning helps positioning but creates extra margins
  // on nested components, but it offers good absolute positioning options for
  // child elements
  position: relative;
  @include debug-app-component;
};

// helps to ensure that scrolling does not cross app footer or header
// the reason for not using flex is that view will not always be a flex-container
// This plays out in scenarios where view requires animation like slide ins/slie outs
// These are not good for flex
.view-container {
  @content-padding:0;
  position:relative;
  >.view {
    @extend .fill-container;
    &.with-rows {
      padding-left: @grid-gutter-width/2;
      padding-right: @grid-gutter-width/2;
    }
    >main,section,aside {
      padding:@content-padding;
      overflow: auto;
    }
    >.view-content {
      position: relative;
      padding-top: @content-padding;
    }
  }
}

// chromeless dialog suppresses all 'chrome' in the ng2-bootstrap modal component
.chromeless-modal {
  position:relative;
  // width:95vw;
  // height:90vh;
  .modal-content {

    display:flex;

    border:solid 0 lime;
    padding:0;
    margin:0;

    position:relative;
    width:100%;

    .modal-header {
      //suppress the ng-2 modal header
      display:none;
    }
    .modal-footer {
      //suppress the ng-2 modal footer
      display:none;
    }
    .modal-body {

      flex:1;
      display:flex;

      border:solid 0 orangered;
      padding:0;

      position:relative;
      width:100%;

      .chromeless-modal-content {
        position:relative;
        width:100%;
        flex:1;
        display:flex;
        border:solid 0 brown;
        padding:0;

      }
    }

  }
}


//////////////////////
// flex utility styles
//////////////////////

@mixin flex-grow-x(@count:12) {
  @for @i from 1 through @count {
  .flex-grow-#{@i} { flex-grow: $i; }
  }
}
@mixin flex-shrink-x($count:12) {
  @for @i from 1 through $count {
  .flex-shrink-#{@i} { flex-shrink: $i; }
  }
}
// create 12 flex grow/shrink partitions
@include flex-grow-x(12);
@include flex-shrink-x(12);


.flex-container {
    display:flex;
    &.in-column-direction {
      flex-direction: column;
    }
    &.in-row-direction {
      flex-direction: row;
    }
    &.with-wrap {
      flex-wrap: wrap;
    }
    &.with-content-stretch {
      align-content: stretch;
    }
    &.with-align-start {
      align-items:start;
    }
    &.with-align-end {
      align-items:end;
    }
    &.with-align-center {
      align-items:center;
    }
    &.with-align-stretch {
      align-items:stretch;
    }

    // Make sure the main,section,aside parts fill the screen and collapse header and footer if not there
    >main,section,aside {
      @extend .flex-grow-1;
    }
    >.container-fluid {
      position:relative;
      //width:100%;
      flex-grow:1;
      margin-left:0px;
      margin-right:0px;
    }

}

.cursor-pointer {
  cursor: pointer;
}

.user-select-none {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
     -khtml-user-select: none;
       -moz-user-select: none;
        -ms-user-select: none;
         -o-user-select: none;
            user-select: none;
}
